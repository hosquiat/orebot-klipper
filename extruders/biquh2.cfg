[extruder]
step_pin: HermitCrab: PA6
dir_pin: !HermitCrab: PA7
enable_pin: !HermitCrab: PA5
microsteps: 16
rotation_distance: 3.4334
nozzle_diameter: 0.400
filament_diameter: 1.750
max_extrude_cross_section: 50.0
heater_pin: HermitCrab: PA2
sensor_type: EPCOS 100K B57560G104F
sensor_pin: HermitCrab: PA1
min_extrude_temp: 180
min_temp: 0
max_temp: 315
control: pid
pid_kp: 12.495
pid_ki: 0.339
pid_kd: 115.271

[tmc2209 extruder]
uart_pin: HermitCrab: PB0
run_current: 0.650
hold_current: 0.500
stealthchop_threshold: 999999

[probe] # calibration details found here: https://euclidprobe.github.io/05_klipper.html#creep-the-nozzle-down
z_offset: 7.155750

[stepper_z]
position_endstop: 1.337

[bed_mesh]
mesh_max: 280,300

[z_tilt]
points: 
	0, 170
	240, 170

[z_calibration]
nozzle_xy_position: 68,333
switch_xy_position: 32,324
switch_offset: .500
#   The trigger point offset of the used mag-probe switch.
#   Larger values will position the nozzle closer to the bed.
#   This needs to be found out manually.
#   (+) - Increasing this value gets you closer to the bed.
#   (-) - Decreasing this value gets you further away from the bed.

[gcode_macro HOMING_POS]
variable_x_home_pos: 70
variable_y_home_pos: 333
gcode:
    M117 X homing position set to: {printer["gcode_macro HOMING_POS"].x_home_pos}
    M117 Y homing position set to: {printer["gcode_macro HOMING_POS"].y_home_pos}

[homing_override]
axes: xy
gcode: 
	SET_KINEMATIC_POSITION Z=0
	G1 Z20
	SENSORLESS_HOME_X
	SENSORLESS_HOME_Y
	G1 X{printer["gcode_macro HOMING_POS"].x_home_pos} Y{printer["gcode_macro HOMING_POS"].y_home_pos} F5000
	G28.6245197 Z
	G91
	G1 Z20
	G90

[gcode_macro CLEAN_NOZZLE]
variable_start_x: 223
variable_start_y: 333
variable_start_z: 3.5
variable_wipe_dist: -40
variable_wipe_qty: 5
variable_wipe_spd: 200
variable_raise_distance: 20
gcode: 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	QUERY_PROBE
	M402
	G90                                            ; absolute positioning
	G1 X{start_x} Y{start_y} F6000
	G1 Z{start_z} F1500
	{% for wipes in range(1, (wipe_qty + 1)) %}
	G1 X{start_x + wipe_dist} F{wipe_spd * 60}
	G1 X{start_x} F{wipe_spd * 60}
	{% endfor %}
	G1 Z{raise_distance}

[input_shaper]
shaper_type_x: mzv
shaper_freq_x: 45.2
shaper_type_y: zv
shaper_freq_y: 38.4